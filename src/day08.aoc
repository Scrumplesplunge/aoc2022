-- type TreeHeight = Int
-- type CoordX = Int
-- type Coord = (Int, Int)
-- type LabelledTree = (TreeHeight, Int, Int)
-- type LRPair = ([LabelledTree], [LabelledTree], LabelledTree)
-- type UDLRTuple = ([LabelledTree], [LabelledTree],
--                   [LabelledTree], [LabelledTree],
--                   LabelledTree)

-- visibleInRow :: [LabelledTree] -> [Coord]
visibleInRow xs = visibleInRow' (0 - 1) xs
visibleInRow' h xs =
  case xs of
    [] -> []
    (x : xs') ->
      case x of
        (h', x, y) ->
          if h' > h then
            (x, y) : visibleInRow' h' xs'
          else
            visibleInRow' h xs'

-- transpose :: [[Int]] -> [[Int]]
transpose xs = transpose' (concat (map (take 1) xs)) (map (drop 1) xs)
transpose' x xs = if null x then [] else x : transpose xs

-- labelRow :: Int -> [Int] -> [LabelledTree]
labelRow i cs = labelRow' i 0 cs
labelRow' i j cs =
  case cs of
    [] -> []
    (c : cs') -> (c, i, j) : labelRow' i (j + 1) cs'

-- label :: [[TreeHeight]] -> [[LabelledTree]]
label rs = label' 0 rs
label' i rs =
  case rs of
    [] -> []
    (r : rs') -> labelRow i r : label' (i + 1) rs'

-- visibleFromLeft :: [[LabelledTree]] -> [Coord]
visibleFromLeft = concat . map visibleInRow
visibleFromTop = visibleFromLeft . transpose
visibleFromRight = visibleFromLeft . map reverse
visibleFromBottom = visibleFromTop . reverse
visibleInRows rs = nub (visibleFromLeft rs ++ visibleFromRight rs)
visibleInColumns rs = nub (visibleFromTop rs ++ visibleFromBottom rs)
visible rs = nub (visibleInRows rs ++ visibleInColumns rs)

-- parse :: String -> [[LabelledTree]]
parse = label . map parseRow . lines
parseRow cs =
  case cs of
    [] -> []
    (c : cs') -> readInt [c] : parseRow cs'

-- fudgeRow :: [LabelledTree] -> [LRPair]
fudgeRow cs =
  case cs of
    [] -> []
    (c : cs') -> fudgeRow' [] c cs'
-- fudgeRow' :: [LabelledTree] -> LabelledTree -> [LabelledTree] -> [LRPair]
fudgeRow' l x r =
  case r of
    [] -> [(l, r, x)]
    (x' : r') -> (l, r, x) : fudgeRow' (x : l) x' r'

-- const :: a -> b -> a
const x y = x

-- prep :: [LabelledTree] -> [[LabelledTree]] -> [[LabelledTree]]
prep r rs =
  case rs of
    [] -> map (const []) r
    (x : xs) -> transpose rs

-- fudge :: [[LabelledTree]] -> [UDLRTuple]
fudge rs =
  case rs of
    [] -> []
    (r : rs') -> fudge' [] r rs'
-- fudge' :: [[LabelledTree]] -> [LabelledTree] -> [[LabelledTree]] ->
--           [UDLRTuple]
fudge' a r b =
  case b of
    [] -> combine (prep r a) (fudgeRow r) (prep r b)
    (r' : b') ->
      combine (prep r a) (fudgeRow r) (prep r b) ++ fudge' (r : a) r' b'
-- combine :: [[LabelledTree]] -> [LabelledTree] -> [[LabelledTree]] ->
--            [UDLRTuple]
combine as rs bs =
  case as of
    [] -> []
    (a : as') -> case rs of
      [] -> []
      (r : rs') -> case bs of
        [] -> []
        (b : bs') -> case r of
          (l, r, x) -> (a, b, l, r, x) : combine as' rs' bs'

-- height :: LabelledTree -> Int
height hxy =
  case hxy of
    (h, x, y) -> h

-- view :: Int -> [LabelledTree] -> Int
view h ts = view' h 0 ts
-- view' :: Int -> Int -> [LabelledTree] -> Int
view' h n ts =
  case ts of
    [] -> n
    (t : ts') ->
      if height t < h then
        view' h (n + 1) ts'
      else
        n + 1
-- score :: UDLRTuple -> Int
score udlr =
  case udlr of
    (u, d, l, r, x) -> case x of
      (h, x, y) -> view h u * view h d * view h l * view h r

part1 = length . visible
part2 = maximum . map score . fudge
solve input = showInt (part1 input) ++ "\n" ++ showInt (part2 input) ++ "\n"
main = solve . parse
