-- Assuming these builtins:
--   foldr :: (a -> b -> b) -> b -> [a] -> b
--   lines :: String -> [String]
--   sort :: Ord a => [a] -> [a]
--   readInt :: String -> Int
--   reverse :: [a] -> [a]
--   showInt :: Int -> String
--   sum :: [Int] -> Int
--   take :: Int -> [a] -> [a]

-- parseInput :: String -> [Int]
parseInput = parseInput' 0 . lines
parseInput' n xs =
  case xs of
    [] -> [n]
    (x : xs') -> case x of
      "" -> n : parseInput' 0 xs'
      x -> parseInput' (n + readInt x) xs'

-- max :: Int -> Int -> Int
max a b = if a < b then b else a

-- part1 :: [Int] -> Int
part1 = foldr max 0

-- part2 :: [Int] -> Int
part2 = sum . take 3 . reverse . sort

solve input =
  showInt (part1 input) ++ "\n" ++ showInt (part2 input) ++ "\n"

-- main :: String -> String
main = solve . parseInput
