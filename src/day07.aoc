-- type Stack = [Int]
-- type Size = Int

-- cd :: [String] -> String -> Stack -> [Size]
cd lines dest stack =
  if dest == "/" then
    parseLines lines [0]
  else if dest == ".." then
    head stack : parseLines lines (pop stack)
  else
    parseLines lines (0 : stack)

-- pop :: Stack -> Stack
pop stack = case stack of
  (s : ss) -> add s ss

-- add :: Size -> Stack -> Stack
add n stack = case stack of
  (size : sizes') -> size + n : sizes'

-- exit :: Stack -> [Size]
exit stack = exit' (head stack) (tail stack)
exit' s ss = case ss of
  [] -> [s]
  (s' : ss') -> s : exit' (s + s') ss'

-- parseLines :: [String] -> Stack -> [Size]
parseLines lines stack = case lines of
  [] -> exit stack
  (line : lines') ->
    case words line of
      (w : ws) ->
        if w == "$" then
          runCommand lines' ws stack
        else if w == "dir" then
          parseLines lines' stack
        else
          parseLines lines' (add (readInt w) stack)

-- runCommand :: [String] -> [String] -> Stack -> [Size]
runCommand lines command stack =
  case command of
    (op : args) ->
      if op == "cd" then
        case args of
          (dest : nil) -> cd lines dest stack
      else
        parseLines lines stack

-- parseInput :: String -> [Size]
parseInput input = parseLines (lines input) [0]

bigEnough input x = x >= maximum input - 40000000

part1 input = sum     (filter (flip lt 100000)  input)
part2 input = minimum (filter (bigEnough input) input)
solve input = showInt (part1 input) ++ "\n" ++ showInt (part2 input) ++ "\n"
main = solve . parseInput
